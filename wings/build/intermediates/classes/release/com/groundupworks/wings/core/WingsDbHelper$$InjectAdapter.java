// Code generated by dagger-compiler.  Do not edit.
package com.groundupworks.wings.core;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<WingsDbHelper>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code WingsDbHelper} and its
 * dependencies.
 *
 * Being a {@code Provider<WingsDbHelper>} and handling creation and
 * preparation of object instances.
 */
public final class WingsDbHelper$$InjectAdapter extends Binding<WingsDbHelper>
    implements Provider<WingsDbHelper> {
  private Binding<android.content.Context> context;

  public WingsDbHelper$$InjectAdapter() {
    super("com.groundupworks.wings.core.WingsDbHelper", "members/com.groundupworks.wings.core.WingsDbHelper", IS_SINGLETON, WingsDbHelper.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", WingsDbHelper.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<WingsDbHelper>}.
   */
  @Override
  public WingsDbHelper get() {
    WingsDbHelper result = new WingsDbHelper(context.get());
    return result;
  }

}
