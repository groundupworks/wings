// Code generated by dagger-compiler.  Do not edit.
package com.groundupworks.wings.core;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<WingsService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code WingsService} and its
 * dependencies.
 *
 * Being a {@code Provider<WingsService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<WingsService>} and handling injection
 * of annotated fields.
 */
public final class WingsService$$InjectAdapter extends Binding<WingsService>
    implements Provider<WingsService>, MembersInjector<WingsService> {
  private Binding<android.content.Context> mContext;
  private Binding<WingsDbHelper> mDatabase;

  public WingsService$$InjectAdapter() {
    super("com.groundupworks.wings.core.WingsService", "members/com.groundupworks.wings.core.WingsService", NOT_SINGLETON, WingsService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mContext = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", WingsService.class, getClass().getClassLoader());
    mDatabase = (Binding<WingsDbHelper>) linker.requestBinding("com.groundupworks.wings.core.WingsDbHelper", WingsService.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mContext);
    injectMembersBindings.add(mDatabase);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<WingsService>}.
   */
  @Override
  public WingsService get() {
    WingsService result = new WingsService();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<WingsService>}.
   */
  @Override
  public void injectMembers(WingsService object) {
    object.mContext = mContext.get();
    object.mDatabase = mDatabase.get();
  }

}
